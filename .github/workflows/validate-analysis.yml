name: Validate Analysis Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-analysis:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest nbval
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test data collection
      run: |
        python test_data_collection.py
    
    - name: Test ML models
      run: |
        python test_ml_predictions.py
    
    - name: Test visualizations
      run: |
        python test_visualizations.py
    
    - name: Validate Jupyter notebooks
      run: |
        pytest --nbval Strategic_Human_Capital_Analysis_REAL_DATA.ipynb
    
    - name: Check dashboard files exist
      run: |
        test -f web/enhanced_storytelling_dashboard.html
        test -f strategic_human_capital_complete_dataset.csv
        test -f strategic_human_capital_portfolio_report.txt

  validate-data:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas numpy
    
    - name: Validate data quality
      run: |
        python -c "
        import pandas as pd
        import numpy as np
        
        # Test main dataset
        df = pd.read_csv('strategic_human_capital_complete_dataset.csv')
        print(f'Dataset shape: {df.shape}')
        
        # Check for missing values
        missing = df.isnull().sum().sum()
        assert missing == 0, f'Found {missing} missing values'
        
        # Check for required columns
        required_cols = ['state', 'human_capital_roi', 'education_performance_index']
        for col in required_cols:
            assert col in df.columns, f'Missing required column: {col}'
        
        # Check data ranges
        assert df['human_capital_roi'].min() > 0, 'Invalid ROI values'
        assert len(df) == 50, f'Expected 50 states, got {len(df)}'
        
        print('✅ Data validation passed!')
        "

  check-documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Check required files
      run: |
        test -f README.md
        test -f CLAUDE.md
        test -f LICENSE
        test -f requirements.txt
        test -f CONTRIBUTING.md
    
    - name: Validate README structure
      run: |
        grep -q "Strategic Human Capital Investment Analysis" README.md
        grep -q "Live Demo" README.md
        grep -q "Data Sources" README.md
        grep -q "Quick Start" README.md
        grep -q "Contact" README.md
    
    - name: Check for broken links (basic)
      run: |
        grep -o 'https://[^)]*' README.md | head -5 | while read url; do
          echo "Checking: $url"
          curl -s --head "$url" | head -1 | grep -q "200 OK" || echo "Warning: $url might be broken"
        done

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'
      continue-on-error: true
    
    - name: Check for sensitive data
      run: |
        # Check for potential API keys or secrets
        ! grep -r -i "api[_-]key\|secret\|password\|token" --exclude-dir=.git --exclude="*.md" . || {
          echo "Warning: Potential sensitive data found"
          exit 1
        }
        echo "✅ No sensitive data detected"